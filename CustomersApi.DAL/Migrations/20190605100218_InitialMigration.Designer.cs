// <auto-generated />
using CustomersApi.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CustomersApi.DAL.Migrations
{
    [DbContext(typeof(CustomersContext))]
    [Migration("20190605100218_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CustomersApi.DAL.Entities.Address", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("AddressType")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("varchar(1)");

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("CustomerName");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Street")
                        .HasMaxLength(100);

                    b.Property<string>("ZIP")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("CustomerId", "AddressType");

                    b.HasIndex("AddressType");

                    b.HasIndex("CustomerId", "CustomerName");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            CustomerId = "c1",
                            AddressType = "D",
                            City = "Dallas",
                            Country = "US",
                            CustomerName = "John",
                            Name = "home",
                            Street = "2nd Avenue",
                            ZIP = "234"
                        },
                        new
                        {
                            CustomerId = "c1",
                            AddressType = "I",
                            City = "Dallas",
                            Country = "US",
                            CustomerName = "John",
                            Name = "work",
                            Street = "2nd Avenue",
                            ZIP = "234"
                        });
                });

            modelBuilder.Entity("CustomersApi.DAL.Entities.AddressTypeMapping", b =>
                {
                    b.Property<string>("AddressType")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("varchar(1)");

                    b.Property<string>("AddressName");

                    b.HasKey("AddressType");

                    b.ToTable("AddressTypeMappings");

                    b.HasData(
                        new
                        {
                            AddressType = "D",
                            AddressName = "delivery address"
                        },
                        new
                        {
                            AddressType = "I",
                            AddressName = "invoice address"
                        },
                        new
                        {
                            AddressType = "S",
                            AddressName = "service address"
                        });
                });

            modelBuilder.Entity("CustomersApi.DAL.Entities.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Street")
                        .HasMaxLength(100);

                    b.Property<string>("ZIP")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("CustomerId", "Name");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = "c1",
                            Name = "John",
                            City = "New York",
                            Country = "US",
                            Street = "1st Avenue",
                            ZIP = "123"
                        });
                });

            modelBuilder.Entity("CustomersApi.DAL.Entities.Address", b =>
                {
                    b.HasOne("CustomersApi.DAL.Entities.AddressTypeMapping", "AddressTypeMapping")
                        .WithMany()
                        .HasForeignKey("AddressType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CustomersApi.DAL.Entities.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId", "CustomerName")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
